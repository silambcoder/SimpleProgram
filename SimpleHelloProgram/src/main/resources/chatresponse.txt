Sure! Here's an example Spring Boot application with a controller, main class, and pom.xml file that will print "Hello, World!" when you run it:

1. First, create a new Spring Boot project using your preferred IDE (e.g. IntelliJ, Eclipse, etc.) or via the command line. 

2. In the project directory, create a new class called `HelloController` with the following code:

```
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @GetMapping("/")
    public String hello() {
        return "Hello, World!";
    }
}
```

This code defines a REST controller that listens for HTTP GET requests to the root endpoint ("/") and returns a string with the message "Hello, World!".

3. Next, create a new class called `Application` with the following code:

```
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

This code defines the main class of our Spring Boot application and uses the `@SpringBootApplication` annotation to enable Spring Boot autoconfiguration and component scanning. The `main` method simply starts the application.

4. Finally, create a new `pom.xml` file in the project root directory with the following code:

```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
         
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>hello-world</artifactId>
    <version>1.0.0</version>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>2.6.3</version>
        </dependency>
    </dependencies>

</project>
```

This code defines our Maven project configuration and declares a single dependency on the `spring-boot-starter-web` package, which provides the necessary libraries for building web applications with Spring Boot.

5. Now, you can run the application by executing the `main` method of the `Application` class. Once the application has started, you can access it by navigating to `http://localhost:8080` in your web browser. You should see the message "Hello, World!" displayed on the screen.

That's it! You've created a basic Spring Boot application that prints "Hello, World!".